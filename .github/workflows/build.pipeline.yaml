name: Building JoyEnergy Api

on:
  workflow_dispatch:
  pull_request:
  push:
    paths-ignore:
      - 'README.md'
      - 'pre-commit-config.yaml'

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

env:
  docker_image_name: 'joy_energy_api'
  docker_registry: 'ghcr.io'
  python_version: 3.12
  poetry_version: 1.8.1
  poetry_home: "/opt/poetry"

permissions:
  contents: read
  actions: read
  security-events: write
  packages: write

jobs:
  testing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{env.python_version}}

      - name: Install poetry ${{env.poetry_version}}
        shell: bash
        run: |
          curl -sSL https://install.python-poetry.org | POETRY_HOME=${{env.poetry_home}} python3 - --version ${{env.poetry_version}}
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry --version

      - name: Install test dependencies
        shell: bash
        run: |
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry install --with tests

      - name: Run unit tests
        shell: bash
        run: |
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry run pytest tests/ --cov . --cov-report html

  linting:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{env.python_version}}

      - name: Install poetry ${{env.poetry_version}}
        shell: bash
        run: |
          curl -sSL https://install.python-poetry.org | POETRY_HOME=${{env.poetry_home}} python3 - --version ${{env.poetry_version}}
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry --version

      - name: Install ci dependencies
        shell: bash
        run: |
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry install --only ci

      - name: Run ruff
        shell: bash
        continue-on-error: true
        run: |
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry run ruff check .

      - name: Run black
        shell: bash
        continue-on-error: true
        run: |
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry run black . --check

      - name: Run hadolint
        shell: bash
        continue-on-error: true
        run: |
          docker pull hadolint/hadolint
          docker run --rm -i hadolint/hadolint < Dockerfile

  containerization:
    runs-on: ubuntu-latest
    needs:
      - testing
      - linting
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.docker_image_name }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ env.docker_image_name }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.12.0
        continue-on-error: true
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ env.docker_image_name }}:${{ github.sha }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Run Trivy vulnerability scanner (SARIF)
        uses: aquasecurity/trivy-action@0.12.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ env.docker_image_name }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'


  deploy:
    name: Deploy to AWS App Runner
    needs: containerization
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only deploy on main branch
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ env.docker_image_name }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || \
          aws ecr create-repository \
            --repository-name ${ECR_REPOSITORY} \
            --image-tag-mutability MUTABLE

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy image from GHCR to ECR
        env:
          GHCR_IMAGE: ghcr.io/${{ github.repository_owner }}/${{ env.docker_image_name }}:${{ github.sha }}
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        run: |
          # Pull from GHCR
          echo "Pulling image from GHCR..."
          docker pull ${GHCR_IMAGE}

          # Tag for ECR
          echo "Tagging for ECR..."
          docker tag ${GHCR_IMAGE} ${ECR_REGISTRY}/${ECR_REPOSITORY}:${{ github.sha }}
          docker tag ${GHCR_IMAGE} ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest

          # Push to ECR
          echo "Pushing to ECR..."
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${{ github.sha }}
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest

      - name: Deploy to App Runner
        uses: awslabs/amazon-app-runner-deploy@v1
        with:
          service: joy-energy-api
          image: ${{ steps.ecr-login.outputs.registry }}/${{ env.docker_image_name }}:${{ github.sha }}
          access-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          runtime: PYTHON_3
          cpu: '1 vCPU'
          memory: '2 GB'
          port: 8020
          build-command: "poetry install"
          start-command: "poetry run python -m src.main"
          region: ${{ env.AWS_REGION }}
          wait-for-service-stability-seconds: 300
